fn syscall_write(c: char): void {
  asm {
    "MOV X0, #1" // STDOUT
    "ADD X1, FP, #16" // PTR (FP+16) // function argument
    "MOV X2, 1"
    "MOV X16, #4"
    "SVC 0"
   };
}

fn writeChar(c: char): void {
  syscall_write(c);
}

fn writeU8(num: u8): void {
  var div: u8 = 1;
  var digit_count: u8 = 1;
  while ( div <= num / 10 ) {
    digit_count = digit_count + 1;
    div = div * 10;
  }
  while ( digit_count > 0 ) {
    syscall_write(((num / div) + 0x30) as char);
    num = num % div;
    div = div / 10;
    digit_count = digit_count - 1;
  }
}

fn writeI8(num: i8): void {
  if (num < 0) {
    syscall_write('-');
    num = num * -1;
  }
  var div: i8 = 1;
  var digit_count: i8 = 1;
  while ( div <= num / 10 ) {
    digit_count = digit_count + 1;
    div = div * 10;
  }
  while ( digit_count > 0 ) {
    syscall_write(((num / div) + 0x30) as char);
    num = num % div;
    div = div / 10;
    digit_count = digit_count - 1;
  }
}

fn main(): u8 {
  if (true) {
    writeU8(42);
    writeChar('\n');
    writeU8(0);
    writeI8(-54);
  }
  return 0;
}
